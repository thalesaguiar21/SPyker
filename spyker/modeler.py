import sklearn.mixture as mixtures


def create_models(X, Y):
    """ X and Y are, respectively, the input and output vectors """
    model = mixtures.GaussianMixture(
        n_components=1, covariance_type='full', tol=0.001, reg_covar=1e-06,
        max_iter=100, n_init=1, init_params='kmeans', weights_init=None,
        means_init=None, precisions_init=None, random_state=None,
        warm_start=False, verbose=0, verbose_interval=10)
    model.fit(X)


def _map_adaptation():
    pass


class Modeler:

    def __init__(self, model):
        self.model = model

    def likelihood(self, Xi, speaker_id):
        """ Return the log-likelihood that the vector Xi is generated by
        speaker_id """
        probabilities = self.model.predict_proba(Xi)
        return probabilities[speaker_id]

    def validate(self, Xi, speaker_id, threshold=0.9):
        """ """
        if threshold <= 0.0 or threshold >= 1.0:
            raise ValueError('threshold must be in [0.0, 1.0]')
        acceptance = self.predict_proba(Xi)
        return acceptance >= threshold
